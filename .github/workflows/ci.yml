name: Go CI/CD para Fincore API

on:
  push:
    branches:
      - main
  
  pull_request:
    branches:
      - main
    
    paths:
      - 'api/**'

jobs:

  build-and-test:
    name: Build & Teste
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: fincore_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5


    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      
      - name: Set Working Directory
        run: echo "WORK_DIR=./api" >> $GITHUB_ENV

      - name: Set Environment Variables for Tests
        run: |
          echo "API_PORT=8080" >> $GITHUB_ENV
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
          echo "DB_HOST=localhost" >> $GITHUB_ENV # 'localhost' funciona com 'services'
          echo "DB_PORT=5432" >> $GITHUB_ENV
          echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "DB_NAME=fincore_test" >> $GITHUB_ENV # Usando o DB de teste
          echo "REDIS_ADDR=localhost:6379" >> $GITHUB_ENV
        working-directory: ${{ env.WORK_DIR }}

      - name: Install Dependencies
        run: go mod tidy
        working-directory: ${{ env.WORK_DIR }}

      - name: Instalar Migrate CLI
        run: |
          go install -tags 'pgx5' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH
        working-directory: ${{ env.WORK_DIR }}

      - name: Rodar Migrações no Banco de Teste
        run: |
          echo "Rodando migrações em $DB_HOST..."
          migrate -source "file://./migrations" -database "pgx5://$DB_USER:$DB_PASSWORD@$DB_HOST:$DB_PORT/$DB_NAME?sslmode=disable" up
        working-directory: ${{ env.WORK_DIR }}

      - name: Run Linter
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          golangci-lint run
        working-directory: ${{ env.WORK_DIR }}

      - name: Rodar Testes Unitários
        run: go test -v -race ./...
        working-directory: ${{ env.WORK_DIR }}

  
  
  build-and-push-docker:
    name: Build & Push
    runs-on: ubuntu-latest
    
    
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'    
    services:
      # Nome do serviço (pode ser qualquer um)
      postgres:
        image: postgres:16-alpine
        # Variáveis de ambiente para o container do Postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }} # Usa o segredo
          POSTGRES_DB: fincore_test # Usamos um DB de teste
        ports:
          - 5432:5432 # Mapeia a porta
        # Opções para checagem de saúde (garante que o DB está pronto)
        options: >-
          --health-cmd "pg_isready"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5



    steps:
      
      - name: Checkout code
        uses: actions/checkout@v4

      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }} 
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./api 
          file: ./api/Dockerfile 
          push: true 
          tags: |
            ghcr.io/${{ github.repository_owner }}/fincore-api:latest
            ghcr.io/${{ github.repository_owner }}/fincore-api:${{ github.sha }}
          
          cache-from: type=gha
          cache-to: type=gha,mode=max